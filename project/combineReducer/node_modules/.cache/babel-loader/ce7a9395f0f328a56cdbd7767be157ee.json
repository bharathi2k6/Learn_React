{"ast":null,"code":"var _jsxFileName = \"D:\\\\new_redex\\\\project\\\\reduxthunk\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOGIN_START = 'LOGIN_START';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAILIR = 'LOGIN_FAILIR';\nconst initialValue = {\n  loading: false,\n  data: [],\n  error: ''\n};\n\nconst AsynReducer = (state = initialValue, action) => {\n  switch (action.type) {\n    case LOGIN_START:\n      return { ...state,\n        loading: true\n      };\n\n    case LOGIN_SUCCESS:\n      return {\n        loading: false,\n        data: action.payload,\n        error: ''\n      };\n\n    case LOGIN_FAILIR:\n      return {\n        loading: false,\n        data: [],\n        error: action.error\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = AsynReducer;\nconst store = createStore(AsynReducer, applyMiddleware(thunk));\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 49,\n  columnNumber: 20\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"AsynReducer\");","map":{"version":3,"sources":["D:/new_redex/project/reduxthunk/src/index.js"],"names":["React","ReactDOM","App","createStore","Provider","thunk","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILIR","initialValue","loading","data","error","AsynReducer","state","action","type","payload","store","applyMiddleware","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAG,KADS;AAEnBC,EAAAA,IAAI,EAAC,EAFc;AAGnBC,EAAAA,KAAK,EAAC;AAHa,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACL,YAAP,EAAoBM,MAApB,KAA+B;AACjD,UAAOA,MAAM,CAACC,IAAd;AACC,SAAKV,WAAL;AACE,aAAO,EACN,GAAGQ,KADG;AAENJ,QAAAA,OAAO,EAAC;AAFF,OAAP;;AAKF,SAAKH,aAAL;AACC,aAAO;AACLG,QAAAA,OAAO,EAAC,KADH;AAELC,QAAAA,IAAI,EAACI,MAAM,CAACE,OAFP;AAGLL,QAAAA,KAAK,EAAC;AAHD,OAAP;;AAMA,SAAKJ,YAAL;AACE,aAAO;AACPE,QAAAA,OAAO,EAAC,KADD;AAEPC,QAAAA,IAAI,EAAC,EAFE;AAGPC,QAAAA,KAAK,EAACG,MAAM,CAACH;AAHN,OAAP;;AAMF;AACE,aAAM,EACJ,GAAGE;AADC,OAAN;AAtBJ;AA0BD,CA3BD;;KAAMD,W;AA4BL,MAAMK,KAAK,GAAGf,WAAW,CAACU,WAAD,EAAaM,eAAe,CAACd,KAAD,CAA5B,CAAzB;AAECJ,QAAQ,CAACmB,MAAT,eAAiB,QAAC,QAAD;AAAU,EAAA,KAAK,EAAEF,KAAjB;AAAA,yBACf,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADe;AAAA;AAAA;AAAA;AAAA,QAAjB,EAGAG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {createStore} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst LOGIN_START = 'LOGIN_START';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAILIR = 'LOGIN_FAILIR';\n\nconst initialValue = {\n  loading : false,\n  data:[],\n  error:''\n}\n\nconst AsynReducer = (state=initialValue,action) => {\n  switch(action.type){\n   case LOGIN_START:\n     return {\n      ...state,\n      loading:true,\n     }\n    \n   case LOGIN_SUCCESS:\n    return {\n      loading:false,\n      data:action.payload,\n      error:''\n     }\n       \n    case LOGIN_FAILIR:\n      return {\n      loading:false,\n      data:[],\n      error:action.error\n      }\n      \n    default:\n      return{\n        ...state\n      }\n  }\n}\n const store = createStore(AsynReducer,applyMiddleware(thunk));\n\n  ReactDOM.render( <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n\n"]},"metadata":{},"sourceType":"module"}