{"ast":null,"code":"var _jsxFileName = \"D:\\\\new_redex\\\\redux\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore } from 'redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INTERNAL_USER = 'INTERNAL_USER';\nconst EXTERNAL_USER = 'EXTERNAL_USER'; // Action\n\nconst intenalUserAction = () => ({\n  type: INTERNAL_USER\n});\n\nconst externalUserAction = () => ({\n  type: EXTERNAL_USER\n}); // Reducer\n\n\nconst userReducer = (state, action) => {\n  switch (action.type) {\n    case INTERNAL_USER:\n      return state = 'user form internal';\n\n    case EXTERNAL_USER:\n      return state = 'User from outsource';\n\n    default:\n      return state = 'User type is not able to find';\n  }\n}; // store \n\n\nlet store = createStore(userReducer);\nstore.subscribe(() => console.log('State after dispatch: ', store.getState())); // disapatch\n\nconsole.log(store.dispatch(intenalUserAction()));\nconsole.log(store.dispatch(externalUserAction()));\nReactDOM.render( /*#__PURE__*/_jsxDEV(\"h1\", {\n  children: \"test\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n/* \r\n\r\n\r\nexport const intenalUserAction = () => ({type:INTERNAL_USER});\r\nexport const externalUserAction = () => ({type:EXTERNAL_USER});\r\nexport const subscribeAction = () =>({type:SUBSCRIBE});\r\n\r\nconst initialValue = {\r\n  stateValue : 'User type not selected',\r\n  isSubscribe:false\r\n}\r\n\r\nconst userReducer = (state = initialValue,action) => {\r\n switch(action.type){\r\n  case SUBSCRIBE:\r\n     return {\r\n      ...state,\r\n      isSubscribe: !state.isSubscribe\r\n     }\r\n    break;\r\n  case INTERNAL_USER:\r\n     return {\r\n      ...state,\r\n      stateValue:'User form mydomain'\r\n     }\r\n  break;\r\n  case EXTERNAL_USER:\r\n    return {\r\n      ...state,\r\n      stateValue:'User from other company'\r\n     }    \r\n  break;\r\n  default:\r\n    return {\r\n      ...state\r\n    }\r\n  break;\r\n }\r\n}\r\n\r\n let store = createStore(userReducer); \r\n\r\nReactDOM.render( <Provider store={store}>\r\n  <App />\r\n</Provider>,\r\ndocument.getElementById('root')); */","map":{"version":3,"sources":["D:/new_redex/redux/src/index.js"],"names":["React","ReactDOM","createStore","INTERNAL_USER","EXTERNAL_USER","intenalUserAction","type","externalUserAction","userReducer","state","action","store","subscribe","console","log","getState","dispatch","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AAEA,SAAQC,WAAR,QAA0B,OAA1B;;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,aAAa,GAAG,eAAtB,C,CACA;;AACA,MAAMC,iBAAiB,GAAG,OAAO;AAACC,EAAAA,IAAI,EAACH;AAAN,CAAP,CAA1B;;AACA,MAAMI,kBAAkB,GAAG,OAAO;AAACD,EAAAA,IAAI,EAACF;AAAN,CAAP,CAA3B,C,CACA;;;AAEA,MAAMI,WAAW,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AACrC,UAAOA,MAAM,CAACJ,IAAd;AACE,SAAKH,aAAL;AACE,aAAOM,KAAK,GAAG,oBAAf;;AAEH,SAAKL,aAAL;AACE,aAAOK,KAAK,GAAG,qBAAf;;AAEF;AACE,aAAOA,KAAK,GAAC,+BAAb;AARH;AAUA,CAXD,C,CAaA;;;AACA,IAAIE,KAAK,GAAGT,WAAW,CAACM,WAAD,CAAvB;AACCG,KAAK,CAACC,SAAN,CAAgB,MACfC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,KAAK,CAACI,QAAN,EAAtC,CADD,E,CAID;;AACAF,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACK,QAAN,CAAeX,iBAAiB,EAAhC,CAAZ;AACEQ,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACK,QAAN,CAAeT,kBAAkB,EAAjC,CAAZ;AAEFN,QAAQ,CAACgB,MAAT,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA8BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport {createStore} from 'redux';\r\nconst INTERNAL_USER = 'INTERNAL_USER';\r\nconst EXTERNAL_USER = 'EXTERNAL_USER';\r\n// Action\r\nconst intenalUserAction = () => ({type:INTERNAL_USER});\r\nconst externalUserAction = () => ({type:EXTERNAL_USER});\r\n// Reducer\r\n\r\nconst userReducer = (state,action) => {\r\n switch(action.type){\r\n   case INTERNAL_USER:\r\n     return state = 'user form internal';\r\n  \r\n  case EXTERNAL_USER:\r\n    return state = 'User from outsource';\r\n  \r\n  default:\r\n    return state='User type is not able to find';  \r\n }\r\n}\r\n\r\n// store \r\nlet store = createStore(userReducer);\r\n store.subscribe(() =>\r\n  console.log('State after dispatch: ', store.getState())\r\n);\r\n\r\n// disapatch\r\nconsole.log(store.dispatch(intenalUserAction()));\r\n  console.log(store.dispatch(externalUserAction()));\r\n\r\nReactDOM.render(<h1>test</h1>,document.getElementById('root'));\r\n\r\n/* \r\n\r\n\r\nexport const intenalUserAction = () => ({type:INTERNAL_USER});\r\nexport const externalUserAction = () => ({type:EXTERNAL_USER});\r\nexport const subscribeAction = () =>({type:SUBSCRIBE});\r\n\r\nconst initialValue = {\r\n  stateValue : 'User type not selected',\r\n  isSubscribe:false\r\n}\r\n\r\nconst userReducer = (state = initialValue,action) => {\r\n switch(action.type){\r\n  case SUBSCRIBE:\r\n     return {\r\n      ...state,\r\n      isSubscribe: !state.isSubscribe\r\n     }\r\n    break;\r\n  case INTERNAL_USER:\r\n     return {\r\n      ...state,\r\n      stateValue:'User form mydomain'\r\n     }\r\n  break;\r\n  case EXTERNAL_USER:\r\n    return {\r\n      ...state,\r\n      stateValue:'User from other company'\r\n     }    \r\n  break;\r\n  default:\r\n    return {\r\n      ...state\r\n    }\r\n  break;\r\n }\r\n}\r\n\r\n let store = createStore(userReducer); \r\n\r\nReactDOM.render( <Provider store={store}>\r\n  <App />\r\n</Provider>,\r\ndocument.getElementById('root')); */\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}